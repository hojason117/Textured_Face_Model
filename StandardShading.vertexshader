#version 330 core

layout(location = 0) in vec4 vertexPosition_modelspace;
layout(location = 1) in vec4 vertexColor;
layout(location = 2) in vec3 vertexNormal;

out vec4 vs_vertexColor;
out vec3 Normal_cameraspace;
out vec3 EyeDirection_cameraspace;
out vec3 LightDirection_cameraspace;

uniform mat4 M;
uniform mat4 V;
uniform mat4 P;
uniform vec3 LightPosition_worldspace;

void main(){
    gl_Position =  P * V * M * vertexPosition_modelspace;
    
    // Vector that goes from the vertex to the camera, in camera space.
    vec3 vertexPosition_cameraspace = ( V * M * vertexPosition_modelspace).xyz;
    EyeDirection_cameraspace = vertexPosition_cameraspace - vec3(0,0,0);
    
    vec3 LightPosition_cameraspace = ( V * vec4(0.0, 15.0, 30.0,1.0)).xyz;
    //vec3 LightPosition_cameraspace = ( V * vec4(LightPosition_worldspace,1)).xyz;
    LightDirection_cameraspace = LightPosition_cameraspace + EyeDirection_cameraspace;
    
    Normal_cameraspace = (V * M * vec4(vertexNormal, 0.0)).xyz;
    
    vs_vertexColor = vertexColor;
}
